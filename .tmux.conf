### Initial setup
set-option -g default-terminal "tmux-256color"   # default use 256 colors
set-option -sa terminal-overrides ',tmux-256color:RGB'
# set-option -ga terminal-overrides ',screen-256color:Tc'

# use for neovim 'autoread'
set-option -g focus-events on

# Use C-s (control and s key at the same time) as the prefix key
unbind-key C-b
set-option -g prefix C-s
bind-key -r C-s send-prefix

set-option -g mode-keys "vi"
set-option -g status-keys "emacs"
# Change cursor shape in neovim
set-option -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set-option -sg escape-time "10"
# Prevent renaming once you have manully changed it
set-option -g allow-rename off
# Window index begin from 1
set-option -g base-index 1
# Auto renumber window when create and destroy
set-option -g renumber-windows on
# Increase scrollback buffer size
set-option -g history-limit 50000
# Tmux messages are displayed for 4 seconds
set-option -g display-time 4000

# Use v for begin copy, C-v for rectangle-toggle
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi _ send-keys -X start-of-line

# Use - & \ to split window
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \\ split-window -h -c '#{pane_current_path}'

# Use , for last window (original key is l)
bind-key , last-window
# Use ^ for rename window (original key is ,)
bind-key ^ command-prompt -I "#W" "rename-window -- '%%'"

# Use ctrl hjkl to resize panes
bind-key -r k resizep -U 1
bind-key -r j resizep -D 1
bind-key -r h resizep -L 1
bind-key -r l resizep -R 1
bind-key -r C-k resizep -U 5
bind-key -r C-j resizep -D 5
bind-key -r C-h resizep -L 5
bind-key -r C-l resizep -R 5

# Shift arrow to switch windows
bind-key -n S-Left previous-window
bind-key -n S-Right next-window

# Quickly edit todo list
bind-key d split-window -h -c "~/Documents/Todos" "nvim todo.md"
bind-key D detach-client

# Create/Rename current session to Notes, and current window to wiki
bind-key w new-session -s "Notes" -n "wiki" -c "~/Documents/Vimwiki/wiki"
bind-key C-w rename-session "Notes" \; rename-window "wiki"

# Create a new session Projects, and rename current window to scanbot2d
bind-key P new-session -s "Projects" -n "scanbot2d" -c "~/Projects/scanbot/scanbot2d"

# Rebind prefix + W to choose-tree
bind-key W choose-tree -Zw

# Mouse mode
set-option -g mouse "on"

# Easy config reload
bind-key r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# Q to close current session and select another one to attach
bind-key Q \
  if-shell '[ "$(tmux display -p \"#{session_many_attached}\" | bc)" = 1 ]' \
    choose-session \
    "run-shell \"tmux choose-session \\\"switch-client -t '%%'; kill-session -t '$(tmux display -p '#S')'\\\"\""

# X to choose a session to kill
bind-key X run-shell "tmux choose-session \"kill-session -t '%%'\""

bind-key N command-prompt -p "new session name: " "new-session -s '%%'"
# Use fzf as fuzzy finder to switch session
bind-key F run-shell "tmux split-window -l 12 'bash -ci fs'"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
bind-key -n 'M-p' if-shell "$is_vim" 'send-keys M-p'  'select-pane -l'
bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-p' select-pane -l

# Use C-s M-l to clear the screen
bind-key M-l send-keys 'M-l'

# Default status bar appearance
set-option -g status-bg brightblack
set-option -g status-fg white
set-option -g status-justify centre
set-option -g status-left '#[fg=cyan][#{session_name}]'
set-option -g status-left-length 25
set-option -g status-right '#[fg=white,bg=default]%H:%M #[default] #[fg=blue]%Y-%m-%d%a'
if-shell "test -f ~/dotfiles/nightly_fox.txt" "source ~/dotfiles/nightly_fox.txt"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# Restore tmux environment after system restart
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
# Highlight when press tmux prefix key
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_prefix_prompt 'î˜›'
set -g @prefix_highlight_fg '#80D4FF'
set -g @prefix_highlight_bg '#272d38'
# Copy to the system clipboard in tmux
set -g @plugin 'tmux-plugins/tmux-yank'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
